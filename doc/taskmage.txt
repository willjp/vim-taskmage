*taskmage.txt*    Work with plaintext tasklists, save with metadata to json files.

Author:   Will Pittman
License:  BSD
Requires: vim compiled with python

================================================================================
CONTENTS                           *taskmage-contents*
================================================================================

    1.Introduction.....................taskmage-intro
        1.1.History
    2.QuickStart.......................taskmage-quickstart
    3.Commands.........................taskmage-commands
        3.1.Project
        3.1.Search
        3.1.Active/Archived
    4.Usage............................taskmage-usage
        4.1.Creating Projects
        4.2.Task Syntax
        4.3.Task Comments
        4.4.Task Sections
        4.5.Archiving Tasks
    5.Plugin Integration...............taskmage-plugin-integration
        5.1.TagBar

================================================================================
INTRODUCTION                       *taskmage-intro*
================================================================================

TaskMage lets you create/manage tasklists in a format inspired by
RestructuredText. Completed tasks are archived in the .taskmage
directory so you can use this data later (reports etc.).

Goals:~

I've tried a few cli task managers and none perfectly suited my workflow.
I wanted something relatively free-form (like a piece of paper) that cleans
itself when the task list gets too large.

* Very simple syntax
* Quickly edit/change tasks
* Easily annotate
* Store annotations within the task


================================================================================
QUICKSTART                         *taskmage-quickstart*
================================================================================

1. Create a file with the extension 
   `:e chores.mtask`

2. Create some tasks, and save

`> kitchen`
`> =======`
`>`
`> * clean kitchen`
`>   * sink`
`>   * oven`
`>   * coffee maker`


3. Begin a task by replacing `x` with `o`
   (look! it changes colour!)

`> kitchen`
`> =======`
`>`
`> * clean kitchen`
`>   o sink`
`>   * oven`
`>   * coffee maker`


4. Complete some tasks by replacing `o` with `x`
   Indicate skipped tasks by replacing `o` with `-`

`> kitchen`
`> =======`
`>`
`> x clean kitchen`
`>   x sink`
`>   x oven`
`>   - coffee maker  # cleaned last week`


5. Archive a section once completed with 
   `:TaskMageArchiveCompleted`


================================================================================
COMMANDS                           *taskmage-commands*
================================================================================

Project:~

`:TaskMageArchiveCompleted`
    Archive fully completed task-chains.

`:TaskMageCreateProject`
    Create a new taskmage project.


Search:~
`:TaskMageSearch <keyword>`
   Search all tasks for a keyword.

`:TaskMageLatest [active:0] [finished:0] [modified:[<>]DATE] [created:[<>]DATE]`
   List all tasks sorted by modified-date.
   The filter active:1 is implied unless it is provided.

   filters:
    `active:`   0/1              archived/active
    `finished:` 0/1              (done/skip) vs (todo/wip)
    `modified:` [<>]YYYY-MM-DD   last recorded change to task
    `created:`  [<>]YYYY-MM-DD   task creation date

    example:
    `:TaskMageLatest finished:0 created:>2020-01-01`


Active/Archived:~
`:TaskMageToggle`
`:TaskMageSplit`
`:TaskMageVSplit`
    Switches between the taskfile, and the
    equivalent archive-taskfile.

================================================================================
USAGE                              *taskmage-usage*
================================================================================

Creating Projects:~

Open vim, and use the command `:TaskMageCreateProject` to create
a new taskmage project. It will create the empty directory
`.taskmage`, which is where archived tasks will be copied to.


Task Syntax:~

Once that is done, simply start editing any file with the suffix
of `*.mtask`. Tasks are created in the form of *reStructuredText* lists. 
When you are done, Simply save the file, and it will be stored as JSON.

> * task 1
> * task 2
>    * subtask of 'task 2'
>        * subtask of 'subtask of task 2'



Different symbols are used to indicate different task-statuses.

> `*` tasks that must be done 
> `x` completed tasks
> `o` tasks in progress
> `-` skipped tasks


> * task 2
>    x completed subtask of 'task 2'
>    - skipped subtask
>    o in-progress subtask
>    


Task Comments:~

Comments can be added to the end of tasks. 
They will be highlighted differently. I use this
to keep notes for myself.

> - pickup toy for birthday    # Alex beat me to it



Task Sections:~

Tasks can be divided into sections for convenience. I use
`universal-ctags`, and the `tagbar` vim plugin to help me
more quickly navigate between sections.

> * task 1
>     * subtask 1
> 
> section
> =======
> 
> * task 2
>     * subtask 2



Archiving Tasks:~

As your task-files begin to fill up with completed tasks,
you can clean completed-chains of tasks using the vim
command `:TaskMageArchiveCompleted`. Tasks are not deleted,
they are stored under the hidden directory `.taskmage/`.


================================================================================
PLUGIN INTEGRATION                 *taskmage-usage*
================================================================================

TagBar:~

The https://github.com/majutsushi/tagbar vim plugin is supported natively, but
requires an externally installed python interpreter. The code is based on the
excellent https://github.com/jszakmeister/rst2ctags .

================================================================================
vim:tw=78:et:ft=help:norl
