Before (delete window):
  " delete the window
  try
    let bufwin = bufwinnr(taskmage#searchbuffer#name())
    exec printf('%s wincmd c', bufwin)
  catch
  endtry

  " clear the post-open job-queue betwen tests
  call taskmage#searchbuffer#clear_postcmds()


# ========
# exists()
# ========
Execute (win_exists() false before creation):
  AssertEqual taskmage#searchbuffer#win_exists(),  0

Execute (exists() true after creation):
  call taskmage#searchbuffer#open()
  AssertEqual taskmage#searchbuffer#win_exists(),  1

Execute (exists() false after close):
  call taskmage#searchbuffer#open()
  call taskmage#searchbuffer#close()
  AssertEqual taskmage#searchbuffer#win_exists(),  0


# ==============
# focus_window()
# ==============

Execute (focus from other window):
  call taskmage#searchbuffer#open()
  vs new
  call taskmage#searchbuffer#focus_window()
  AssertEqual taskmage#searchbuffer#name(), bufname('%')

Execute (focus does nothing when window does not exist):
  let start_winnr = bufwinnr(bufname('%'))
  call taskmage#searchbuffer#focus_window()
  let end_winnr = bufwinnr(bufname('%'))
  AssertEqual start_winnr, end_winnr

Execute (focus does nothing when searchbuffer already focused):
  call taskmage#searchbuffer#open()
  AssertEqual taskmage#searchbuffer#name(), bufname('%')


# =======
# clear()
# =======

Execute (clears buffer):
  call taskmage#searchbuffer#open()
  call setline(1, ['a', 'b', 'c'])
  call taskmage#searchbuffer#clear()
  AssertEqual '', getline(1)

Execute (restores non-searchbuffer focus):
  call taskmage#searchbuffer#open()
  vs new
  call taskmage#searchbuffer#clear()
  AssertEqual 'new', bufname('%')

Execute (keeps searchbuffer focus):
  call taskmage#searchbuffer#open()
  call taskmage#searchbuffer#clear()
  AssertEqual taskmage#searchbuffer#name(), bufname('%')


# ==============
# set contents()
# ==============

Execute (creates window):
  call taskmage#searchbuffer#set_contents(['a', 'b', 'c'])
  Assert bufwinnr(taskmage#searchbuffer#name()) >= 0

Execute (restores focus):
  e new
  call taskmage#searchbuffer#set_contents([])
  AssertEqual 'new', bufname('%')

Execute (clears existing contents):
  call taskmage#searchbuffer#open()
  call setline(1, ['1', '2', 'c'])
  call taskmage#searchbuffer#set_contents(['a', 'b', 'c'])
  AssertEqual ['a', 'b', 'c'], getline(1, 3)

# =============
# open_search()
# =============

" NOTE:   I have had some *VERY* hairy issues here.
"         Despite 'BufReadCmd' managing setting vim-buffer text instead of vim,
"         commands following ``:edit +/search filepath.mtask`` appear to be run before
"         the file finishes being read.
"
"         I've never encountered this running tests locally, but about 97% failure rate in
"         TravisCI likely indicates a race condition.
"       
"         Code has been modified to queue a command after the rendering has completed. 
"         Works in travis, but makes testing opened-line number difficult.
"       
"         Now depending on vim raising exception if match is not found within rendered file.       
"
"
"Execute (test opens correct line):
"  call taskmage#searchbuffer#open()
"  let filepath = fnamemodify('tests/resources/example.mtask', ':p')
"  call setline(1, printf('||%s|B2DA77994F614106A79AF52EA9DDFAE4|(2019-01-01 12:00)|* task B-2', filepath))
"  call taskmage#searchbuffer#open_searchresult()
"  " assert line was changed to 4
"  AssertEqual 4, line('.')

Execute (opens file):
  call taskmage#searchbuffer#open()
  let filepath = fnamemodify('tests/resources/example.mtask', ':p')
  call setline(1, printf('||%s|B2DA77994F614106A79AF52EA9DDFAE4|(2019-01-01 12:00)|* task B-2', filepath))
  call taskmage#searchbuffer#open_searchresult()
  AssertEqual filepath, expand('%:p')

